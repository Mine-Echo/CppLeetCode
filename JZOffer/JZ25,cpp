//合并两个有序链表
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(nullptr) {}
};

class Solution {
public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param pHead1 ListNode类 
     * @param pHead2 ListNode类 
     * @return ListNode类
     */
    ListNode* Merge(ListNode* pHead1, ListNode* pHead2) {
        // write code here
        //经典merge
        ListNode* head =new ListNode(0),*dummy=head;
        while(pHead1!=nullptr&&pHead2!=nullptr){
            if(pHead1->val>pHead2->val){
                head->next=pHead2;
                pHead2=pHead2->next;
            }else{
                head->next=pHead1;
                pHead1=pHead1->next;
            }
            head=head->next;
        }
        if(pHead1!=nullptr)
            head->next=pHead1;
        else
            head->next=pHead2;
        head=dummy->next;
        delete dummy;
        return head;
        
        //递归版
        // if(pHead1==nullptr)
        //     return pHead2;
        // if(pHead2==nullptr)
        //     return pHead1;
        // if(pHead1->val>pHead2->val){
        //     ListNode* node=pHead2;
        //     pHead2=pHead2->next;
        //     node->next=Merge(pHead1,pHead2);
        //     return node;
        // }else{
        //     ListNode* node=pHead1;
        //     pHead1=pHead1->next;
        //     node->next=Merge(pHead1,pHead2);
        //     return node;
        // }
    }
};